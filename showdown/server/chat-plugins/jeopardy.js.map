{
  "version": 3,
  "sources": ["../../../../server/chat-plugins/jeopardy.ts"],
  "sourcesContent": ["import {Utils} from '../../lib';\r\n\r\nconst BACKGROUND_COLOR = \"#0000FF\";\r\nconst HEIGHT = 40;\r\nconst MAX_CATEGORY_COUNT = 5;\r\nconst MAX_QUESTION_COUNT = 5;\r\nconst BUZZ_COOLDOWN = 500; // 0.5 seconds\r\n\r\ninterface Question {\r\n\tquestion: string;\r\n\tanswer: string;\r\n\tpoints: number;\r\n\tanswered: boolean;\r\n\tdd: boolean;\r\n}\r\n\r\ntype JeopardyState = 'signups' | 'selecting' | 'answering' | 'wagering' | 'buzzing' | 'checking' | 'round2';\r\n\r\nexport class Jeopardy extends Rooms.RoomGame<JeopardyGamePlayer> {\r\n\thost: User;\r\n\tstate: JeopardyState;\r\n\tgameid: ID;\r\n\tcategories: string[];\r\n\tquestion: Question;\r\n\tquestions: Question[][];\r\n\tfinalQuestion: Question;\r\n\tstarted: boolean;\r\n\tcategoryCount: number;\r\n\tquestionCount: number;\r\n\tround: number;\r\n\tcanBuzz: boolean;\r\n\tnumUpdates: number;\r\n\tfinalCategory: string;\r\n\tansweringTime: number;\r\n\tfinalAnsweringTime: number;\r\n\ttimeout: NodeJS.Timer | null;\r\n\troundStarted: boolean;\r\n\t// FIXME: this type should be `JeopardyGamePlayer | null`\r\n\tcurPlayer: JeopardyGamePlayer;\r\n\tprevPlayer: JeopardyGamePlayer;\r\n\torder: string[];\r\n\tpoints: Map<JeopardyGamePlayer, number>;\r\n\tfinals: boolean;\r\n\tgameNumber: number;\r\n\r\n\tconstructor(room: Room, user: User, categoryCount: number, questionCount: number, playerCap: number) {\r\n\t\tsuper(room);\r\n\t\tthis.gameNumber = room.nextGameNumber();\r\n\t\tthis.host = user;\r\n\t\tthis.allowRenames = true;\r\n\t\tthis.state = \"signups\";\r\n\t\tthis.gameid = 'jeopardy' as ID;\r\n\t\tthis.title = 'Jeopardy';\r\n\t\tthis.categories = [];\r\n\t\tthis.question = Object.create(null);\r\n\t\tthis.questions = [];\r\n\t\tthis.finalQuestion = Object.create(null);\r\n\t\tthis.started = false;\r\n\t\tthis.categoryCount = categoryCount;\r\n\t\tthis.questionCount = questionCount;\r\n\t\tthis.round = 1;\r\n\t\tthis.points = new Map();\r\n\t\tthis.playerCap = playerCap;\r\n\t\tthis.canBuzz = false;\r\n\t\tthis.numUpdates = 0;\r\n\t\tthis.finalCategory = \"\";\r\n\t\tthis.answeringTime = 10;\r\n\t\tthis.finalAnsweringTime = 30;\r\n\t\tthis.timeout = null;\r\n\t\tthis.roundStarted = false;\r\n\t\tthis.curPlayer = new JeopardyGamePlayer(user, this);\r\n\t\tthis.prevPlayer = new JeopardyGamePlayer(user, this);\r\n\t\tthis.order = [];\r\n\t\tthis.finals = false;\r\n\t\tthis.setupGrid();\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tif (this.timeout) clearTimeout(this.timeout);\r\n\t\tsuper.destroy();\r\n\t}\r\n\r\n\tmakePlayer(user: User) {\r\n\t\treturn new JeopardyGamePlayer(user, this);\r\n\t}\r\n\r\n\tsetupGrid() {\r\n\t\tthis.categories = [];\r\n\t\tfor (let j = 0; j < this.categoryCount; j++) {\r\n\t\t\tthis.categories.push(\"\");\r\n\t\t}\r\n\t\tthis.questions = [];\r\n\t\tfor (let i = 0; i < this.questionCount; i++) {\r\n\t\t\tthis.questions.push([]);\r\n\t\t\tfor (let j = 0; j < this.categoryCount; j++) {\r\n\t\t\t\tthis.questions[i].push({question: '', answer: '', points: 200 * this.round * (i + 1), answered: false, dd: false});\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.finalQuestion = Object.create(null);\r\n\t\tthis.roundStarted = false;\r\n\t\tthis.question = Object.create(null);\r\n\t\tif (this.round === 1) {\r\n\t\t\tthis.display();\r\n\t\t} else {\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t}\r\n\r\n\tstart() {\r\n\t\tif (this.roundStarted) throw new Chat.ErrorMessage(\"The game has already been started.\");\r\n\t\tif (this.playerCount < 2) throw new Chat.ErrorMessage(\"The game needs at least two players to start.\");\r\n\t\tconst noquestions = [];\r\n\t\tfor (let i = 0; i < this.categoryCount; i++) {\r\n\t\t\tfor (let j = 0; j < this.questionCount; j++) {\r\n\t\t\t\tif (!this.questions[j][i].question) {\r\n\t\t\t\t\tnoquestions.push(`(${(i + 1)}, ${(j + 1)})`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet badstr = noquestions.join(\", \");\r\n\t\tif (!this.finalQuestion.question && this.round === 2) {\r\n\t\t\tbadstr += `${(badstr ? \", \" : \"\")} final`;\r\n\t\t}\r\n\t\tif (badstr) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The following questions still need questions and answers: ${badstr}.`);\r\n\t\t}\r\n\t\tthis.roundStarted = true;\r\n\t\tif (this.round === 1) {\r\n\t\t\tfor (const userID in this.playerTable) {\r\n\t\t\t\tconst player = this.playerTable[userID];\r\n\t\t\t\tthis.points.set(player, 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.state = 'selecting';\r\n\t\tlet lowest: string[] = [];\r\n\t\tlet minpoints;\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tconst points = this.playerTable[userID].points;\r\n\t\t\tif (!minpoints) {\r\n\t\t\t\tlowest.push(userID);\r\n\t\t\t\tminpoints = points;\r\n\t\t\t} else if (points < minpoints) {\r\n\t\t\t\tlowest = [userID];\r\n\t\t\t\tminpoints = points;\r\n\t\t\t} else if (points === minpoints) {\r\n\t\t\t\tlowest.push(userID);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.curPlayer = this.playerTable[lowest[Math.floor(lowest.length * Math.random())]];\r\n\t\tthis.prevPlayer = this.curPlayer;\r\n\t\tthis.update();\r\n\t\tthis.nextPlayer();\r\n\t}\r\n\r\n\tnextPlayer() {\r\n\t\tthis.room.addRaw(`${this.curPlayer.name}, you're up!`);\r\n\t}\r\n\r\n\tgetGrid() {\r\n\t\tlet buffer = `<div class=\"infobox\"><html><body><table align=\"center\" border=\"2\" style=\"table-layout: fixed; width: 100%\"><tr>`;\r\n\t\tfor (let i = 0; i < this.categoryCount; i++) {\r\n\t\t\tbuffer += `<td style=\"word-wrap: break-word\" bgcolor=\"${BACKGROUND_COLOR}\"; height=\"${HEIGHT}px\"; width=\"30px\" align=\"center\"><font color=\"white\">${Utils.escapeHTML(this.categories[i])}</font></td>`;\r\n\t\t}\r\n\t\tbuffer += `</tr>`;\r\n\t\tfor (let i = 0; i < this.questionCount; i++) {\r\n\t\t\tbuffer += `<tr>`;\r\n\t\t\tfor (let j = 0; j < this.categoryCount; j++) {\r\n\t\t\t\tbuffer += `<td bgcolor=\"${BACKGROUND_COLOR}\"; height=\"${HEIGHT}px\"; align=\"center\"><font color=\"black\" size=\"6\">${(this.questions[i][j].answered ? \"\" : this.questions[i][j].points)}</font></td>`;\r\n\t\t\t}\r\n\t\t\tbuffer += `</tr>`;\r\n\t\t}\r\n\t\tbuffer += `</table><br />`;\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tconst player = this.playerTable[userID];\r\n\t\t\tconst bold = this.curPlayer?.name === player.name;\r\n\t\t\tbuffer += `${bold ? \"<b>\" : \"\"}<font size=2>${Utils.escapeHTML(player.name)} (${(player.points || 0)})${bold ? \"</b>\" : \"\"}<br />`;\r\n\t\t}\r\n\t\tbuffer += `</body></html></div>`;\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tdisplay() {\r\n\t\tthis.room.add(`|uhtml|jeopardy${this.gameNumber}-${this.numUpdates}|${this.getGrid()}`);\r\n\t}\r\n\r\n\tupdate(dontMove = false) {\r\n\t\tif (dontMove) {\r\n\t\t\tthis.room.add(`|uhtmlchange|jeopardy${this.gameNumber}-${this.numUpdates}|${this.getGrid()}`);\r\n\t\t} else {\r\n\t\t\tthis.room.add(`|uhtmlchange|jeopardy${this.gameNumber}-${this.numUpdates}|`);\r\n\t\t\tthis.numUpdates++;\r\n\t\t\tthis.room.add(`|uhtml|jeopardy${this.gameNumber}-${this.numUpdates}|${this.getGrid()}`);\r\n\t\t}\r\n\t}\r\n\r\n\tdailyDouble() {\r\n\t\tif (this.timeout) clearTimeout(this.timeout);\r\n\t\tthis.state = 'answering';\r\n\t\tif (!this.curPlayer.wager) this.curPlayer.wager = 0;\r\n\t\tthis.askQuestion();\r\n\t}\r\n\r\n\tselect(target: string) {\r\n\t\tif (this.state !== 'selecting') throw new Chat.ErrorMessage(\"The game of Jeopardy is not in the selection phase.\");\r\n\r\n\t\tconst params = target.split(\",\");\r\n\t\tif (params.length < 2) throw new Chat.ErrorMessage(\"You must specify a row and a column number.\");\r\n\t\tconst categoryNumber = parseInt(params[0]);\r\n\t\tif (!categoryNumber || categoryNumber < 1 || categoryNumber > this.categoryCount) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The category must be a number between 1 and ${this.categoryCount}.`);\r\n\t\t}\r\n\t\tconst questionNumber = parseInt(params[1]);\r\n\t\tif (!questionNumber || questionNumber < 1 || questionNumber > this.questionCount) {\r\n\t\t\tthrow new Chat.ErrorMessage(`The question must be a number between 1 and ${this.questionCount}.`);\r\n\t\t}\r\n\t\tconst question = this.questions[questionNumber - 1][categoryNumber - 1];\r\n\t\tif (question.answered) throw new Chat.ErrorMessage(\"That question has already been answered.\");\r\n\t\tthis.question = question;\r\n\t\tif (question.dd) {\r\n\t\t\tthis.room.add(`That was a daily double! ${this.curPlayer.name}, how much would you like to wager?`);\r\n\t\t\tthis.clearWagers();\r\n\t\t\tthis.state = 'wagering';\r\n\t\t\tthis.timeout = setTimeout(() => this.dailyDouble(), 30 * 1000);\r\n\t\t} else {\r\n\t\t\tthis.state = 'buzzing';\r\n\t\t\tthis.askQuestion();\r\n\t\t}\r\n\t}\r\n\r\n\tclearWagers() {\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tthis.playerTable[userID].wager = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tclearBuzzes() {\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tthis.playerTable[userID].buzzed = false;\r\n\t\t}\r\n\t}\r\n\r\n\taskQuestion() {\r\n\t\tif (!this.question.dd) {\r\n\t\t\tthis.curPlayer = null!;\r\n\t\t}\r\n\t\tthis.clearBuzzes();\r\n\t\tthis.room.addRaw(Utils.html`<div class=\"broadcast-blue\">Your question is: ${this.question.question}</div>`);\r\n\t\tif (!this.finals) {\r\n\t\t\tthis.canBuzz = false;\r\n\t\t\tthis.update(true);\r\n\t\t\tthis.timeout = setTimeout(() => this.allowBuzzes(), this.question.question.length / 15 * 1000);\r\n\t\t}\r\n\t}\r\n\r\n\tallowBuzzes() {\r\n\t\tthis.canBuzz = true;\r\n\t\tthis.room.add(`You may now buzz in for the Jeopardy game!`);\r\n\t\tthis.update(true);\r\n\t\tthis.timeout = setTimeout(() => this.allowAllBuzzes(), BUZZ_COOLDOWN);\r\n\t}\r\n\r\n\tallowAllBuzzes() {\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tthis.playerTable[userID].buzzedEarly = false;\r\n\t\t}\r\n\t}\r\n\r\n\trevealAnswer() {\r\n\t\tthis.room.addRaw(`<div class=\"broadcast-blue\">The answer was: ${Utils.escapeHTML(this.question.answer)}</div>`);\r\n\t\tthis.question.answered = true;\r\n\t}\r\n\r\n\tbuzz(user: User) {\r\n\t\tif (this.state !== 'buzzing') throw new Chat.ErrorMessage(\"You cannot buzz in at this time.\");\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tif (!player) throw new Chat.ErrorMessage(\"You are not in the game of Jeopardy.\");\r\n\t\tif (player.buzzed) throw new Chat.ErrorMessage(\"You have already buzzed in to the current question.\");\r\n\t\tif (!this.canBuzz) {\r\n\t\t\tplayer.buzzedEarly = true;\r\n\t\t\tplayer.send(\"You buzzed early! You now have a delay before you will be able to buzz.\");\r\n\t\t\treturn;\r\n\t\t} else if (player.buzzedEarly) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"Your buzzing cooldown has not yet ended.\");\r\n\t\t}\r\n\t\tthis.curPlayer = player;\r\n\t\tthis.curPlayer.buzzed = true;\r\n\t\tthis.room.add(`${user.name} has buzzed in!`);\r\n\t\tthis.state = \"answering\";\r\n\t\tthis.timeout = setTimeout(() => this.check({correct: false, isBuzzTimeout: true}), this.answeringTime * 1000);\r\n\t}\r\n\r\n\thasRemainingQuestion() {\r\n\t\tfor (let i = 0; i < this.questionCount; i++) {\r\n\t\t\tfor (let j = 0; j < this.categoryCount; j++) {\r\n\t\t\t\tif (!this.questions[i][j].answered) return true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstartFinals() {\r\n\t\tthis.update();\r\n\t\tthis.room.add(\"Time to begin finals! The category is: \" + this.finalCategory + \"! Please wager your amounts now.\");\r\n\t\tthis.finals = true;\r\n\t\tthis.state = \"wagering\";\r\n\t\tthis.clearWagers();\r\n\t\tthis.timeout = setTimeout(() => this.finalWagers(), this.finalAnsweringTime * 1000);\r\n\t}\r\n\r\n\twager(amount: string | number, user: User) {\r\n\t\tif (this.state !== \"wagering\" && (!this.finals || this.curPlayer?.id !== user.id)) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"You cannot wager at this time.\");\r\n\t\t}\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tif (!player) throw new Chat.ErrorMessage(\"You are not in the game of Jeopardy.\");\r\n\t\tamount = toID(amount);\r\n\t\tconst wager = (amount === 'all' ? player.points : parseInt(amount));\r\n\t\tif (!wager || isNaN(wager)) throw new Chat.ErrorMessage(\"Your wager must be a number, or 'all'.\");\r\n\t\tif (wager < 0) throw new Chat.ErrorMessage(\"You cannot wager a negative amount.\");\r\n\t\tif (wager > player.points && (wager > (this.round * 1000) || this.finals)) {\r\n\t\t\tthrow new Chat.ErrorMessage(\"You cannot wager more than your current number of points.\");\r\n\t\t}\r\n\t\tif (player.wager) throw new Chat.ErrorMessage(\"You have already wagered.\");\r\n\t\tplayer.wager = wager;\r\n\t\tplayer.send(`You have wagered ${wager} points!`);\r\n\t\tif (!this.finals) {\r\n\t\t\tthis.dailyDouble();\r\n\t\t} else {\r\n\t\t\tfor (const userID in this.playerTable) {\r\n\t\t\t\tif (!this.playerTable[userID].wager) return;\r\n\t\t\t}\r\n\t\t\tif (this.timeout) clearTimeout(this.timeout);\r\n\t\t\tthis.finalWagers();\r\n\t\t}\r\n\t}\r\n\tfinalWagers() {\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tconst player = this.playerTable[userID];\r\n\t\t\tif (!player.wager) player.wager = 0;\r\n\t\t}\r\n\t\tthis.question = this.finalQuestion;\r\n\t\tthis.state = \"answering\";\r\n\t\tthis.askQuestion();\r\n\t\tthis.timeout = setTimeout(() => this.doFinals(), this.finalAnsweringTime * 1000);\r\n\t}\r\n\r\n\tdoFinals() {\r\n\t\tif (!this.playerTable) return this.room?.add(`Could not play finals because the player table does not exist.`);\r\n\t\tthis.order = Object.keys(this.playerTable);\r\n\t\tthis.doFinalPlayer();\r\n\t}\r\n\r\n\tdoFinalPlayer() {\r\n\t\tif (this.order.length === 0) {\r\n\t\t\tthis.revealAnswer();\r\n\t\t\tlet highest: string[] = [];\r\n\t\t\tlet maxpoints;\r\n\t\t\tfor (const userID in this.playerTable) {\r\n\t\t\t\tconst player = this.playerTable[userID];\r\n\t\t\t\tconst points = player.points;\r\n\t\t\t\tif (!maxpoints) {\r\n\t\t\t\t\thighest.push(player.name);\r\n\t\t\t\t\tmaxpoints = points;\r\n\t\t\t\t} else if (points > maxpoints) {\r\n\t\t\t\t\thighest = [player.name];\r\n\t\t\t\t\tmaxpoints = points;\r\n\t\t\t\t} else if (points === maxpoints) {\r\n\t\t\t\t\thighest.push(player.name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.room.add(`|raw|<div class=broadcast-green>Congratulations to ${highest.map(n => Utils.escapeHTML(n)).join(\", \")} for winning the game of Jeopardy with ${maxpoints} points!`);\r\n\t\t\tthis.destroy();\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconst index = this.order.shift() || 0;\r\n\t\t\tthis.curPlayer = this.playerTable[index];\r\n\t\t\tconst answer = this.curPlayer.finalAnswer;\r\n\t\t\tif (answer) {\r\n\t\t\t\tthis.room.add(`${this.curPlayer.name} has answered ${Utils.escapeHTML(answer)}!`);\r\n\t\t\t\tthis.state = \"checking\";\r\n\t\t\t} else {\r\n\t\t\t\tconst wager = this.curPlayer.wager;\r\n\t\t\t\tthis.room.add(`${this.curPlayer.name} did not answer the final Jeopardy and loses ${wager} points`);\r\n\t\t\t\tlet points = this.curPlayer.points;\r\n\t\t\t\tpoints -= wager;\r\n\t\t\t\tthis.curPlayer.points = points;\r\n\t\t\t\tthis.timeout = setTimeout(() => this.doFinalPlayer(), 5 * 1000);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tanswer(target: string, user: User) {\r\n\t\tif (this.state !== 'answering') throw new Chat.ErrorMessage(\"You cannot answer the question at this time.\");\r\n\t\tconst player = this.playerTable[user.id];\r\n\t\tif (!player) throw new Chat.ErrorMessage(\"You are not in the game of Jeopardy.\");\r\n\t\tif (this.finals) {\r\n\t\t\tif (player.finalAnswer) throw new Chat.ErrorMessage(\"You have already answered the Final Jeopardy\");\r\n\t\t\tplayer.answer = Utils.escapeHTML(target);\r\n\t\t\tplayer.send(`You have selected your answer as ${Utils.escapeHTML(target)}.`);\r\n\t\t} else {\r\n\t\t\tif (this.timeout) clearTimeout(this.timeout);\r\n\t\t\tif (!this.curPlayer || this.curPlayer.id !== user.id) throw new Chat.ErrorMessage(\"It is not your turn to answer.\");\r\n\t\t\tthis.state = \"checking\";\r\n\t\t\tthis.room.add(`${user.name} has answered ${Utils.escapeHTML(target)}!`);\r\n\t\t}\r\n\t}\r\n\r\n\tmark(correct: boolean) {\r\n\t\tif (this.state !== 'checking') throw new Chat.ErrorMessage(\"There is no answer to currently check.\");\r\n\t\tthis.check({correct});\r\n\t}\r\n\r\n\tcheck(info: {correct: boolean, isBuzzTimeout?: boolean}) {\r\n\t\tif (info.correct) {\r\n\t\t\tconst gainpoints = ((this.question.dd || this.finals) ? this.curPlayer.wager : this.question.points);\r\n\t\t\tlet points = this.curPlayer.points;\r\n\t\t\tpoints += gainpoints;\r\n\t\t\tthis.curPlayer.points = points;\r\n\t\t\tthis.room.add(`${this.curPlayer.name} has answered the question correctly and gained ${gainpoints} points!`);\r\n\t\t\tif (!this.finals) {\r\n\t\t\t\tthis.revealAnswer();\r\n\t\t\t}\r\n\t\t\tif (this.finals) {\r\n\t\t\t\tthis.doFinalPlayer();\r\n\t\t\t} else if (!this.hasRemainingQuestion()) {\r\n\t\t\t\tif (this.round === 1) {\r\n\t\t\t\t\tthis.round++;\r\n\t\t\t\t\tthis.setupGrid();\r\n\t\t\t\t\tthis.state = \"round2\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.startFinals();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.prevPlayer = this.curPlayer;\r\n\t\t\t\tthis.state = 'selecting';\r\n\t\t\t\tthis.question = Object.create(null);\r\n\t\t\t\tthis.update();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst losspoints = ((this.question.dd || this.finals) ? this.curPlayer.wager : this.question.points);\r\n\t\t\tconst action = info.isBuzzTimeout ? 'failed to answer in time' : 'answered incorrectly';\r\n\t\t\tthis.room.add(`${this.curPlayer.name} ${action} and loses ${losspoints} points!`);\r\n\t\t\tlet points = this.curPlayer.points;\r\n\t\t\tpoints -= losspoints;\r\n\t\t\tthis.curPlayer.points = points;\r\n\t\t\tif (this.finals) {\r\n\t\t\t\tthis.doFinalPlayer();\r\n\t\t\t} else if (this.everyBuzzed() || this.question.dd) {\r\n\t\t\t\tthis.nextQuestion();\r\n\t\t\t} else {\r\n\t\t\t\tthis.state = 'buzzing';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\teveryBuzzed() {\r\n\t\tfor (const userID in this.playerTable) {\r\n\t\t\tif (!this.playerTable[userID].buzzed) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsetCategory(categoryNumber: string | number, category: string) {\r\n\t\tif (typeof categoryNumber === 'string') {\r\n\t\t\tthis.finalCategory = category.trim();\r\n\t\t} else {\r\n\t\t\tthis.categories[categoryNumber] = category.trim();\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t}\r\n\r\n\tnextQuestion() {\r\n\t\tthis.revealAnswer();\r\n\t\tif (!this.hasRemainingQuestion()) {\r\n\t\t\tif (this.round === 1) {\r\n\t\t\t\tthis.round++;\r\n\t\t\t\tthis.setupGrid();\r\n\t\t\t\tthis.state = \"round2\";\r\n\t\t\t} else {\r\n\t\t\t\tthis.startFinals();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.curPlayer = this.prevPlayer;\r\n\t\t\tthis.state = \"selecting\";\r\n\t\t\tthis.question = Object.create(null);\r\n\t\t\tthis.update();\r\n\t\t}\r\n\t}\r\n\r\n\tsetCategories(categories: string[]) {\r\n\t\tif (this.state !== \"signups\" && this.state !== \"round2\") return false;\r\n\t\tfor (const [i, category] of categories.entries()) {\r\n\t\t\tthis.categories[i] = category;\r\n\t\t}\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tgetQuestion(categoryNumber: number, questionNumber: number) {\r\n\t\tconst question = this.questions[questionNumber][categoryNumber];\r\n\t\tif (question.question) {\r\n\t\t\treturn `<strong>Question: </strong>${Utils.escapeHTML(question.question)}<br><strong>Answer: </strong>${Utils.escapeHTML(question.answer)}`;\r\n\t\t} else {\r\n\t\t\treturn \"That question has not yet been imported.\";\r\n\t\t}\r\n\t}\r\n\r\n\tsetDailyDouble(categoryNumber: number, questionNumber: number) {\r\n\t\tconst question = this.questions[questionNumber][categoryNumber];\r\n\t\tif (question.dd) throw new Chat.ErrorMessage(\"That question is already a daily double.\");\r\n\t\tquestion.dd = true;\r\n\t}\r\n\r\n\timportQuestions(questions: string[], questionStart: number, categoryStart: string | number) {\r\n\t\tif (typeof categoryStart === 'string') {\r\n\t\t\tconst split = questions[0].split(\"|\");\r\n\t\t\tif (split.length !== 2) throw new Chat.ErrorMessage(\"Final question was unable to be imported.\");\r\n\t\t\tthis.finalQuestion.question = split[0].trim();\r\n\t\t\tthis.finalQuestion.answer = split[1].trim();\r\n\t\t} else {\r\n\t\t\tfor (let i = categoryStart; i < this.categoryCount; i++) {\r\n\t\t\t\tfor (let j = (i === categoryStart ? questionStart : 0); j < this.questionCount; j++) {\r\n\t\t\t\t\tif (questions.length === 0) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst split = questions[0].split(\"|\");\r\n\t\t\t\t\tif (split.length !== 2) {\r\n\t\t\t\t\t\tthrow new Chat.ErrorMessage(`Questions before ${questions[0]} imported successfully, but ${questions[0]} did not have a question and one answer.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.questions[j][i].question = split[0].trim();\r\n\t\t\t\t\tthis.questions[j][i].answer = split[1].trim();\r\n\t\t\t\t\tquestions.shift();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (questions.length > 0) {\r\n\t\t\t\tconst split = questions[0].split(\"|\");\r\n\t\t\t\tif (split.length !== 2) {\r\n\t\t\t\t\tthrow new Chat.ErrorMessage(`Questions before ${questions[0]} imported successfully, but ${questions[0]} did not have a question and one answer.`);\r\n\t\t\t\t}\r\n\t\t\t\tthis.finalQuestion.question = split[0].trim();\r\n\t\t\t\tthis.finalQuestion.answer = split[1].trim();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgivePoints(user: User | ID, n: number) {\r\n\t\tconst id = toID(user);\r\n\t\tif (!(id in this.playerTable)) throw new Chat.ErrorMessage(`'${id}' is not a player in the game of Jeopardy.`);\r\n\t\tthis.playerTable[id].points += n;\r\n\t}\r\n\r\n\tsubstitute(original: User, substitute: User) {\r\n\t\tconst originalPlayer = this.playerTable[original.id];\r\n\t\tif (!originalPlayer) throw new Chat.ErrorMessage(`${original.name} is not a player in the game of Jeopardy.`);\r\n\r\n\t\tdelete this.playerTable[original.id];\r\n\t\tthis.addPlayer(substitute);\r\n\r\n\t\tthis.playerTable[substitute.id].answer = originalPlayer.answer;\r\n\t\tthis.playerTable[substitute.id].points = originalPlayer.points;\r\n\t\tthis.playerTable[substitute.id].wager = originalPlayer.wager;\r\n\t\tthis.playerTable[substitute.id].buzzedEarly = originalPlayer.buzzedEarly;\r\n\t\tthis.playerTable[substitute.id].finalAnswer = originalPlayer.finalAnswer;\r\n\t\tthis.playerTable[substitute.id].buzzed = originalPlayer.buzzed;\r\n\r\n\t\tthis.room.add(`${substitute.name} subbed in for ${original.name}!`);\r\n\t}\r\n}\r\n\r\nclass JeopardyGamePlayer extends Rooms.RoomGamePlayer<Jeopardy> {\r\n\tanswer: string;\r\n\tpoints: number;\r\n\twager: number;\r\n\tbuzzedEarly: boolean;\r\n\tfinalAnswer: string;\r\n\tbuzzed: boolean;\r\n\r\n\tconstructor(user: User, game: Jeopardy) {\r\n\t\tsuper(user, game);\r\n\t\tthis.answer = '';\r\n\t\tthis.points = 0;\r\n\t\tthis.wager = 0;\r\n\t\tthis.buzzedEarly = false;\r\n\t\tthis.finalAnswer = '';\r\n\t\tthis.buzzed = false;\r\n\t}\r\n}\r\n\r\nexport const commands: Chat.ChatCommands = {\r\n\tjp: 'jeopardy',\r\n\tjeopardy: {\r\n\t\t'': 'help',\r\n\t\thelp() {\r\n\t\t\treturn this.parse(\"/help jeopardy\");\r\n\t\t},\r\n\r\n\t\toff: 'disable',\r\n\t\tdisable(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('gamemanagement', null, room);\r\n\t\t\tif (room.settings.jeopardyDisabled) {\r\n\t\t\t\treturn this.errorReply(\"Jeopardy is already disabled in this room.\");\r\n\t\t\t}\r\n\t\t\troom.settings.jeopardyDisabled = true;\r\n\t\t\troom.saveSettings();\r\n\t\t\treturn this.sendReply(\"Jeopardy has been disabled for this room.\");\r\n\t\t},\r\n\r\n\t\ton: 'enable',\r\n\t\tenable(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tthis.checkCan('gamemanagement', null, room);\r\n\t\t\tif (!room.settings.jeopardyDisabled) {\r\n\t\t\t\treturn this.errorReply(\"Jeopardy is already enabled in this room.\");\r\n\t\t\t}\r\n\t\t\tdelete room.settings.jeopardyDisabled;\r\n\t\t\troom.saveSettings();\r\n\t\t\treturn this.sendReply(\"Jeopardy has been enabled for this room.\");\r\n\t\t},\r\n\r\n\t\tcreate: 'new',\r\n\t\tnew(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tif (room.game) {\r\n\t\t\t\treturn this.errorReply(`There is already a game of ${room.game.title} in progress in this room.`);\r\n\t\t\t}\r\n\t\t\tthis.checkCan('minigame', null, room);\r\n\t\t\tconst params = target.split(\",\");\r\n\r\n\t\t\tconst playerCap = parseInt(params[0]);\r\n\t\t\tconst categoryCount = parseInt(params[1]);\r\n\t\t\tconst questionCount = parseInt(params[2]);\r\n\t\t\tif (isNaN(playerCap) || playerCap <= 1) {\r\n\t\t\t\treturn this.errorReply(`The player cap must be a number above 1.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (isNaN(categoryCount) || categoryCount <= 0) {\r\n\t\t\t\treturn this.errorReply(`The category count must be a number above 0.`);\r\n\t\t\t}\r\n\t\t\tif (categoryCount > MAX_CATEGORY_COUNT) {\r\n\t\t\t\treturn this.sendReply(`A match with more than ${MAX_CATEGORY_COUNT} categories cannot be created.`);\r\n\t\t\t}\r\n\r\n\t\t\tif (isNaN(questionCount) || questionCount <= 0) {\r\n\t\t\t\treturn this.errorReply(`The question count must be a number above 0.`);\r\n\t\t\t}\r\n\t\t\tif (questionCount > MAX_QUESTION_COUNT) {\r\n\t\t\t\treturn this.sendReply(\r\n\t\t\t\t\t`A match with more than ${MAX_QUESTION_COUNT} questions per category cannot be created.`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\troom.game = new Jeopardy(room, user, categoryCount, questionCount, playerCap);\r\n\t\t\tthis.privateModAction(`${user.name} started a new game of Jeopardy.`);\r\n\t\t\tthis.modlog('JEOPARDY', null, `maximum of ${playerCap} players, ${categoryCount} categories, and ${questionCount} questions`);\r\n\t\t},\r\n\r\n\t\tcategories(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst params = target.split(\",\");\r\n\t\t\tif (params.length !== game.categoryCount) {\r\n\t\t\t\treturn this.errorReply(`You must set exactly ${game.categoryCount} categories.`);\r\n\t\t\t}\r\n\t\t\tconst reply = game.setCategories(params);\r\n\t\t\tif (reply) this.errorReply(reply);\r\n\t\t},\r\n\r\n\t\tcategory(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst params = target.split(\",\");\r\n\t\t\tif (params.length !== 2) return this.errorReply(\"You must specify the category number and the category.\");\r\n\t\t\tlet categoryNumber: string | number;\r\n\t\t\tif (params[0] === \"final\") {\r\n\t\t\t\tcategoryNumber = \"final\";\r\n\t\t\t} else {\r\n\t\t\t\tcategoryNumber = parseInt(params[0]);\r\n\t\t\t\tif (!categoryNumber || categoryNumber < 1 || categoryNumber > game.categoryCount) {\r\n\t\t\t\t\treturn this.errorReply(`The category number must be between 1 and ${game.categoryCount}.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgame.setCategory((typeof categoryNumber === 'string' ? categoryNumber : categoryNumber - 1), params[1]);\r\n\t\t},\r\n\r\n\t\tselect(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tgame.select(target);\r\n\t\t},\r\n\r\n\t\tbuzz(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tgame.buzz(user);\r\n\t\t},\r\n\r\n\t\twager(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.lastCommand !== `/jeopardy wager ${target}`) {\r\n\t\t\t\tuser.lastCommand = `/jeopardy wager ${target}`;\r\n\t\t\t\treturn this.sendReply(`To confirm your wager of ${target}, type '${user.lastCommand}' again.`);\r\n\t\t\t}\r\n\t\t\tgame.wager(target, user);\r\n\t\t},\r\n\r\n\t\tanswer(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tgame.answer(target, user);\r\n\t\t},\r\n\r\n\t\timport(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (!target) return this.errorReply(\"You must specify at least one question\");\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst params = target.split(\",\");\r\n\t\t\tlet dataStart = 0;\r\n\t\t\tlet catStart: string | number;\r\n\t\t\tlet questionStart = 1;\r\n\t\t\tif (toID(params[0]) === 'final') {\r\n\t\t\t\tcatStart = 'finals';\r\n\t\t\t\tparams.splice(0, 1);\r\n\t\t\t} else {\r\n\t\t\t\tif (isNaN(Utils.parseExactInt(params[0])) || isNaN(Utils.parseExactInt(params[1]))) {\r\n\t\t\t\t\treturn this.errorReply(`You must specify numeric values for Category Number Start and Question Number Start.`);\r\n\t\t\t\t}\r\n\t\t\t\tcatStart = parseInt(params[0]);\r\n\t\t\t\tif (catStart) {\r\n\t\t\t\t\tif (catStart < 1 || catStart > game.categoryCount) {\r\n\t\t\t\t\t\treturn this.errorReply(`The category must be a number between 1 and ${game.categoryCount}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataStart = 1;\r\n\t\t\t\t\tquestionStart = parseInt(params[1]);\r\n\t\t\t\t\tif (questionStart) {\r\n\t\t\t\t\t\tif (questionStart < 1 || questionStart > game.questionCount) {\r\n\t\t\t\t\t\t\treturn this.errorReply(`The question must be a number between 1 and ${game.questionCount}.`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdataStart = 2;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquestionStart = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcatStart = 1;\r\n\t\t\t\t\tquestionStart = 1;\r\n\t\t\t\t}\r\n\t\t\t\tparams.splice(0, dataStart);\r\n\t\t\t}\r\n\t\t\tconst numberOfQuestions = params.length;\r\n\t\t\tgame.importQuestions(\r\n\t\t\t\tparams, questionStart - 1, (typeof catStart === 'string' ? catStart : catStart - 1)\r\n\t\t\t);\r\n\t\t\tthis.sendReply(`Imported ${numberOfQuestions} questions.`);\r\n\t\t},\r\n\r\n\t\tdd: 'dailydouble',\r\n\t\tdailydouble(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst params = target.split(\",\");\r\n\t\t\tif (params.length !== 2) return this.errorReply(\"You must specify the category number and question number\");\r\n\t\t\tconst categoryNumber = parseInt(params[0]);\r\n\t\t\tif (!categoryNumber || categoryNumber < 1 || categoryNumber > game.categoryCount) {\r\n\t\t\t\treturn this.errorReply(`The category must be a number between 1 and ${game.categoryCount}.`);\r\n\t\t\t}\r\n\t\t\tconst questionNumber = parseInt(params[0]);\r\n\t\t\tif (!questionNumber || questionNumber < 1 || questionNumber > game.questionCount) {\r\n\t\t\t\treturn this.errorReply(`The question must be a number between 1 and ${game.questionCount}.`);\r\n\t\t\t}\r\n\t\t\tgame.setDailyDouble(categoryNumber - 1, questionNumber - 1);\r\n\t\t\tthis.sendReply(\"Daily double has been added.\");\r\n\t\t},\r\n\t\tdailydoublehelp: [\r\n\t\t\t`/jeopardy dailydouble [category number], [question number] - Set a question to be a daily double.`,\r\n\t\t],\r\n\r\n\t\tview(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst params = target.split(\",\");\r\n\t\t\tif (params.length !== 2) return this.errorReply(\"You must specify the category number and question number\");\r\n\t\t\tconst categoryNumber = parseInt(params[0]);\r\n\t\t\tif (!categoryNumber || categoryNumber < 1 || categoryNumber > game.categoryCount) {\r\n\t\t\t\treturn this.errorReply(`The category must be a number between 1 and ${game.categoryCount}.`);\r\n\t\t\t}\r\n\t\t\tconst questionNumber = parseInt(params[1]);\r\n\t\t\tif (!questionNumber || questionNumber < 1 || questionNumber > game.questionCount) {\r\n\t\t\t\treturn this.errorReply(`The question must be a number between 1 and ${game.questionCount}.`);\r\n\t\t\t}\r\n\t\t\tthis.sendReplyBox(game.getQuestion(categoryNumber - 1, questionNumber - 1));\r\n\t\t},\r\n\r\n\t\tjoin(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (game.host.id === user.id) return this.errorReply(\"You are the host and therefore cannot join the game.\");\r\n\t\t\tif (game.state !== 'signups') return this.errorReply(\"This Jeopardy game is not in its signups phase.\");\r\n\t\t\tif (game.addPlayer(user)) {\r\n\t\t\t\tgame.update();\r\n\t\t\t} else {\r\n\t\t\t\tthis.errorReply(\"Unable to join the game.\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tincorrect: 'correct',\r\n\t\tcorrect(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tgame.mark(cmd === 'correct');\r\n\t\t},\r\n\r\n\t\tstart(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tgame.start();\r\n\t\t},\r\n\r\n\t\tkick: 'leave',\r\n\t\tleave(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tconst kicking = cmd.includes('kick');\r\n\t\t\tif (kicking && user.id !== game.host.id) return this.errorReply(\"Only the host can kick players.\");\r\n\t\t\tconst targetUser = kicking ? Users.get(target) : user;\r\n\t\t\tif (!targetUser) return this.errorReply(`User '${target}' not found.`);\r\n\t\t\tif (game.removePlayer(targetUser)) {\r\n\t\t\t\tgame.update();\r\n\t\t\t} else {\r\n\t\t\t\treturn this.errorReply(`Unable to remove '${targetUser.name}' from the game.`);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsubhost(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst targetUser = Users.get(target);\r\n\t\t\tif (!targetUser) return this.errorReply(`User '${target}' not found.`);\r\n\t\t\tgame.host = targetUser;\r\n\t\t\tthis.sendReply(`${targetUser.name} has subbed in as the host.`);\r\n\t\t},\r\n\r\n\t\tsubplayer(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\r\n\t\t\tconst split = target.split(',');\r\n\t\t\tif (split.length !== 2) return this.parse(`/help jeopardy`);\r\n\t\t\tconst [toSubOut, toSubIn] = split.map(u => Users.get(u));\r\n\t\t\tif (!toSubOut) return this.errorReply(`User '${target[0]}' not found.`);\r\n\t\t\tif (!toSubIn) return this.errorReply(`User '${target[1]}' not found.`);\r\n\r\n\t\t\tgame.substitute(toSubOut, toSubIn);\r\n\t\t},\r\n\r\n\t\tstate(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tthis.sendReply(`The game is currently in the ${game.state} state.`);\r\n\t\t},\r\n\r\n\t\tend(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tthis.checkCan('minigame', null, room);\r\n\t\t\tgame.destroy();\r\n\t\t\tthis.privateModAction(`${user.name} ended the game of Jeopardy.`);\r\n\t\t\tthis.modlog('JEOPARDY END');\r\n\t\t},\r\n\r\n\t\tpass(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tgame.nextQuestion();\r\n\t\t},\r\n\r\n\t\ttimer(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst amount = parseInt(target);\r\n\t\t\tif (!amount || amount < 2 || amount > 120) return this.errorReply(\"The amount must be a number between 2 and 120.\");\r\n\r\n\t\t\tgame.answeringTime = amount;\r\n\t\t\tthis.addModAction(`${user.name} has set the answering window for questions to ${amount} seconds`);\r\n\t\t\tthis.modlog('JEOPARDY TIMER', null, `${amount} seconds`);\r\n\t\t},\r\n\r\n\t\tfinaltimer(target, room, user) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\t\t\tconst amount = parseInt(target);\r\n\t\t\tif (!amount || amount < 2 || amount > 300) return this.errorReply(\"The amount must be a number between 2 and 300.\");\r\n\r\n\t\t\tgame.finalAnsweringTime = amount;\r\n\t\t\tthis.addModAction(`${user.name} has set the answering window for the final question to ${amount} seconds`);\r\n\t\t\tthis.modlog('JEOPARDY FINALTIMER', null, `${amount} seconds`);\r\n\t\t},\r\n\r\n\t\tremovepoints: 'addpoints',\r\n\t\taddpoints(target, room, user, connection, cmd) {\r\n\t\t\troom = this.requireRoom();\r\n\t\t\tif (!target) return this.parse(`/help jeopardy`);\r\n\t\t\tconst game = this.requireGame(Jeopardy);\r\n\t\t\tif (user.id !== game.host.id) return this.errorReply(\"This command can only be used by the host.\");\r\n\r\n\t\t\tconst [recipient, pointsString] = target.split(',');\r\n\t\t\tlet points = parseInt(pointsString);\r\n\t\t\tif (points <= 0 || isNaN(points)) {\r\n\t\t\t\treturn this.errorReply(`You must provide a positive number of points to add/remove.`);\r\n\t\t\t}\r\n\t\t\tif (cmd.includes('remove')) points *= -1;\r\n\t\t\tgame.givePoints(toID(recipient), points);\r\n\t\t},\r\n\t},\r\n\tjeopardyhelp() {\r\n\t\tthis.runBroadcast();\r\n\t\treturn this.sendReply(\r\n\t\t\t`|html|<details class=\"readmore\"><summary><code>/jp new [player cap], [number of categories], [number of questions]</code>: Host a new game of Jeopardy. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/jp join</code>: Join the game of Jeopardy.<br />` +\r\n\t\t\t`<code>/jp leave</code>: Leave the game of Jeopardy.<br />` +\r\n\t\t\t`<code>/jp buzz</code>: Buzz into the current question.<br />` +\r\n\t\t\t`<code>/jp answer [answer]</code>: Attempt to answer the current question.</summary>` +\r\n\t\t\t`<code>/jp start</code>: Start the game of Jeopardy. Must be the host.<br />` +\r\n\t\t\t`<code>/jp correct/incorrect</code>: Mark an answer as correct or incorrect. Must be the host.<br />` +\r\n\t\t\t`<code>/jp categories [First Category], [Second Category], etc.</code>: Set the categories of the jeopardy game. Must be the host.<br />` +\r\n\t\t\t`<code>/jp category [Category Number], [Category Name]</code>: Set a specific category of the jeopardy game. Must be the host.<br />` +\r\n\t\t\t`<code>/jp select [Category Number], [Question Number]</code>: Select a question of the Jeopardy game.<br />` +\r\n\t\t\t`<code>/jp end</code>: End the current game of Jeopardy. Requires: % @ # &<br />` +\r\n\t\t\t`<code>/jp dailydouble [Category Number], [Question Number]</code>: Set a question to be a daily double. Must be the host.<br />` +\r\n\t\t\t`<code>/jp wager [amount]</code>: Wager some money for a daily double or finals. Must be a number or 'all'<br />` +\r\n\t\t\t`<code>/jp kick [User]</code>: Remove a user from the game of Jeopardy. Must be the host.<br />` +\r\n\t\t\t`<code>/jp view [Category Number], [Question Number]</code>: View a specific question and answer. Must be the host.<br />` +\r\n\t\t\t`<code>/jp subhost [User]</code>: Sub a new host into the game. Must be the host.<br />` +\r\n\t\t\t`<code>/jp subplayer [original], [substitute]</code>: Sub a new player into the game. Must be the host.<br />` +\r\n\t\t\t`<code>/jp import [Category Number Start], [Question Number Start], [Question 1 | Answer 1], [Question 2 | Answer 2], etc.</code>: Import questions into the current game of Jeopardy. Must be the host.<br />` +\r\n\t\t\t`<code>/jp pass</code>: Skip the current question of Jeopardy. Must be the host.<br />` +\r\n\t\t\t`<code>/jp state</code>: Check the state of the current Jeopardy game. Must be the host.<br />` +\r\n\t\t\t`<code>/jp timer [seconds]</code>: Set the answering window after buzzing for questions<br />` +\r\n\t\t\t`<code>/jp finaltimer [seconds]</code>: Set the answering window for answering the final question<br />` +\r\n\t\t\t`<code>/jp addpoints [user], [number of points]</code>: Give a player an arbitrary number of points. Must be the host.<br />` +\r\n\t\t\t`<code>/jp remove [user], [number of points]</code>: Subtract an arbitrary number of points from a player. Must be the host.</details>`\r\n\t\t);\r\n\t},\r\n};\r\n\r\nexport const roomSettings: Chat.SettingsHandler = room => ({\r\n\tlabel: \"Jeopardy\",\r\n\tpermission: 'editroom',\r\n\toptions: [\r\n\t\t[`disabled`, room.settings.jeopardyDisabled || 'jeopardy disable'],\r\n\t\t[`enabled`, !room.settings.jeopardyDisabled || 'jeopardy enable'],\r\n\t],\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
